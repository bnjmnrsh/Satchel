{"version":3,"file":"Satchel.min.js","sources":["../src/Satchel.js"],"sourcesContent":["/**\n * A utility for managaing the freshness of namespaced sessionStorage and localStorage entries.\n */\nclass Satchel {\n  static _stcl\n  #pocketKey\n  #store\n  #settings\n\n  /**\n   * @class Satchel\n   * @classdec Create new Satchel instance\n   * @param {string|null} key Storage key\n   * @param {object} cargo The cargo payload to be saved to Storage\n   * @property {object|string} cargo.data The data to be saved, may be string or object\n   * @property {number|null} cargo.expiry The expiry time of the cargo ,may be a number or null\n   * @param {boolean} [local=false] Specify sessionStorage (default) or localStorage\n   * @param {string} [pocket='pocket'] Namespace for Storage keys, default is 'pocket'\n   */\n  constructor(key = null, cargo = {}, local = false, pocket = 'pocket') {\n    this.#store = local ? window.localStorage : window.sessionStorage\n    if (!key) {\n      throw new Error('Satchel: a \"key\" is required.')\n    }\n    if (typeof key !== 'string') {\n      throw new Error('Satchel: \"key\" must be a string.')\n    }\n    if (!this.#isObject(cargo)) {\n      throw new Error('Satchel: {cargo} must be an object.')\n    }\n    if (typeof local !== 'boolean') {\n      throw new Error('Satchel: \"local\" must be a boolean.')\n    }\n    if (typeof pocket !== 'string') {\n      throw new Error('Satchel: \"pocket\" must be a string.')\n    }\n\n    this.#pocketKey = `${Satchel.stcl}.${pocket}.${key}`\n    this.#settings = { data: undefined, expiry: null }\n\n    cargo = { ...this.#settings, ...cargo }\n\n    // Set the cargo to Storage\n    this.set(cargo)\n  }\n\n  /**\n   * Setter for Satchel.stcl must be a string.\n   *\n   * @static\n   * @memberof Satchel\n   */\n  static set stcl(prefix) {\n    if (typeof prefix !== 'string') {\n      throw new Error('Satchel.stcl must be a string.')\n    }\n    this._stcl = prefix\n  }\n\n  /**\n   * Getter for the Satchel.stcl property.\n   * Returns the prefix for current Satchel instance, defaulting to 'stcl'.\n   *\n   * @static\n   * @memberof Satchel\n   */\n  static get stcl() {\n    return this._stcl ? this._stcl : 'stcl'\n  }\n\n  /**\n   * Returns an object of age and freshness related data\n   *\n   * @typedef {object} Age object\n   * @property {number} age in milliseconds\n   * @property {number} creation Date.now() (ms)src/Satchel.js\n   * @property {boolean} fresh if Store key is fresh\n   * @return {Age|null} An age object representing the age of the current Store key.\n   */\n  age() {\n    const store = JSON.parse(this.#store.getItem(this.#pocketKey))\n    if (!store) return null\n    return {\n      age: Date.now() - store._creation,\n      creation: store._creation,\n      expiry: store.expiry ? store.expiry : null,\n      fresh: this.isFresh()\n    }\n  }\n\n  /**\n   * Remove the current namespaced key from the store.\n   *\n   * @returns { boolian:true | null } Returns true on success, or null if no record found.\n   */\n  bin() {\n    const item = this.#store.getItem(this.#pocketKey)\n    if (!item) return null\n    this.#store.removeItem(this.#pocketKey)\n    Satchel.#emit({\n      key: this.#pocketKey,\n      oldValue: item,\n      storageArea: Satchel.#storageAreaString(this.#store),\n      action: 'bin'\n    })\n    return true\n  }\n\n  /**\n   * Get the data for the current Storage key.\n   *\n   * @param {boolean} getStale flag to ignore stale entries from a \"pocket\"\n   * @returns {object|boolan:false} the data for the stored key or false.\n   */\n  get(getStale = false) {\n    const item = this.#store.getItem(this.#pocketKey)\n    if (!item) return false // TODO: return null instead\n    if ((this.isFresh() && !getStale) || getStale) {\n      return JSON.parse(item)\n    }\n    return false\n  }\n\n  /**\n   * Sets the cargo object for a given key and namespace.\n   *\n   * @param {object} settings object\n   * @property {object|string} data the Storage object to set\n   * @property {number|null} expiry the expiery date in (ms)\n   *\n   * @return {Satchel} Satchel\n   */\n  set({ data, expiry }) {\n    if (typeof expiry !== 'number' && expiry !== null) {\n      throw new Error(\n        'Satchel.set({expiry}): \"expiry\" must be null or a number.'\n      )\n    }\n    if (data && typeof data !== 'string' && !this.#isObject(data)) {\n      throw new Error(\n        'Satchel.set({data}): \"data\" must be a string or an object.'\n      )\n    }\n    if (data && this.#isObject(data)) {\n      try {\n        JSON.parse(JSON.stringify(data))\n      } catch (e) {\n        throw new Error(`Satchel.set({data}): 'data': ${e}`)\n      }\n    }\n    const storedEntry = this.get(true)\n    const temp = {}\n    temp.data = data || null\n    temp.expiry = expiry || null\n\n    // dont overwrite existing creation time\n    temp._creation = storedEntry._creation || Date.now()\n    // Set storage values\n    this.#store.setItem(this.#pocketKey, JSON.stringify(temp))\n\n    Satchel.#emit({\n      key: this.#pocketKey,\n      newValue: JSON.stringify(temp),\n      oldValue: storedEntry ? JSON.stringify(storedEntry) : null,\n      storageArea: Satchel.#storageAreaString(this.#store),\n      action: 'set'\n    })\n    return this\n  }\n\n  /**\n   * Check if current item is fresh.\n   *\n   * @returns {boolean|null} true if the item has not expired, null if the record doesn't exist.\n   */\n  isFresh() {\n    const store = JSON.parse(this.#store.getItem(this.#pocketKey))\n    if (!store) return null\n    return !store?.expiry ? true : store.expiry - Date.now() > 0\n  }\n\n  /**\n   * Returns the current namespaced Store key (pocket.key), the key is prefixed with 'stcl'.\n   * Note that this is the internal reference to the key, not proof the key has been set to Storage.\n   *\n   * @returns {string} the key to the current pocket-key\n   */\n  getKey() {\n    return this.#pocketKey\n  }\n\n  /**\n   * Emulates the StorageEvent API, which may be preferable for some use cases.\n   * https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent\n   *\n   * Emit custom events for Satchel\n   * @typedef {CustomEvent}\n   * @param {object} detail Event details\n   * @property {string|null} detail.key name of the Storage key being called\n   * @property {string|null} detail.pocket name of the Storage pocket being cleaned\n   * @property {string|null} detail.newValue the updated value of the Storage key\n   * @property {string|null} detail.oldValue the old value of the Storage key\n   * @property {number|null} detail.keysBefore then number of keys in the pocket before emptyPocket or tidyPocket\n   * @property {number|null} detail.keysAfter then number of keys in the pocket after emptyPocket or tidyPocket\n   * @property {string} detail.storageArea, the type of Storage object\n   * @property {string} detail.url, the url of the document whoes key changed\n   * @property {string} detail.action the name of the Satchel function emiting the event\n   * @property {boolean} [pocketClean = false] Optional flag to indiacte a emptyPocket or tidyPocket opperation.\n   * @returns {CustomEvent} CustomEvent\n   */\n  static #emit(detail = {}) {\n    const required = {\n      key: null,\n      newValue: null,\n      oldValue: null,\n      storageArea: null,\n      url: window.location.href,\n      action: null\n    }\n    detail = { ...required, ...detail }\n    const event = new CustomEvent('Satchel', {\n      bubbles: true,\n      cancelable: true,\n      detail\n    })\n    return document.dispatchEvent(event)\n  }\n\n  /**\n   * Get the Storage type as a string: 'localStorage' or 'sessionStorage'.\n   *\n   * @param {object} Storage object\n   * @returns {string} the Storage type as a string 'localStorage' or 'SessionStorage'\n   */\n  static #storageAreaString(store) {\n    return store === window.localStorage ? 'LocalStorage' : 'SessionStorage'\n  }\n\n  /**\n   * Test if a value is an interable object.\n   *\n   * @param {*} doesit the value to be checked\n   * @returns\n   */\n  #isObject(doesit) {\n    return doesit && typeof doesit === 'object' && doesit.constructor === Object\n  }\n\n  /**\n   * Returns an instance of Satchel associated with the given key, pocket,store, or false if none is found.\n   *\n   * @param {string} key key for the stored item\n   * @param {string} [pocket='pocket'] namespace prefix, default 'pocket'\n   * @param {string} [local='false'] specify sessionStorage (default) or localStorage\n   * @returns {Satchel|false} new Satchel instance | false\n   */\n  static getSatchel(key, local = false, pocket = 'pocket') {\n    if (!key) {\n      throw new Error('Satchel.getSatchel(key): a \"key\" is required.')\n    }\n    if (typeof key !== 'string') {\n      throw new Error('Satchel.getSatchel(key): \"key\" must be a string.')\n    }\n    if (typeof local !== 'boolean') {\n      throw new Error(\n        'Satchel.getSatchel(key, local): \"local\" must be a boolean.'\n      )\n    }\n    if (typeof pocket !== 'string') {\n      throw new Error(\n        'Satchel.getSatchel(key, local, pocket): \"pocket\" must be an string.'\n      )\n    }\n\n    const pocketKey = `${Satchel.stcl}.${pocket}.${key}`\n    const store = local ? window.localStorage : window.sessionStorage\n    const item = JSON.parse(store.getItem(pocketKey))\n    if (!item || item.length === 0) return false\n\n    return new Satchel(key, item, local, pocket)\n  }\n}\n\nexport { Satchel }\n"],"names":["Satchel","static","pocketKey","store","settings","constructor","key","cargo","local","pocket","this","window","localStorage","sessionStorage","Error","isObject","stcl","data","undefined","expiry","set","prefix","_stcl","age","JSON","parse","getItem","Date","now","_creation","creation","fresh","isFresh","bin","item","removeItem","emit","oldValue","storageArea","storageAreaString","action","get","getStale","stringify","e","storedEntry","temp","setItem","newValue","getKey","detail","url","location","href","event","CustomEvent","bubbles","cancelable","document","dispatchEvent","doesit","Object","length"],"mappings":"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"}